{"version":3,"sources":["Event/dialogComponent.js","Event/schedulerComponent.js","Event/Event.jsx","Event/index.jsx","serviceWorker.js","index.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","DialogComponent","Dialog","open","maxWidth","style","borderRadius","background","fullWidth","scroll","aria-labelledby","aria-describedby","id","onCloseTitle","TitleName","dividers","SchedulerComponent","dataSource","views","defaultCurrentView","defaultCurrentDate","Date","height","startDayHour","editing","showAllDayPanel","startDateExpr","textExpr","EventPage","handleCreateEvent","setState","isEvent","handleEditEvent","row","destination","selectedDate","start","duration","comment","isEventEdit","handleTextfield","name","val","handleDateChange","date","onCloseModal","errors","state","eventDetails","deleteID","isOpenAlert","formIsValid","this","fetch","links","method","headers","Accept","then","response","statusCode","status","data","json","Promise","all","catch","error","isLoading","NotificationManager","handleValidation","body","JSON","stringify","AllEvent","success","addEvent","dialogContent","deleteEvent","show","showCancel","confirmBtnText","confirmBtnBsStyle","cancelBtnBsStyle","onOutsideClick","title","onConfirm","DeleteEvent","onCancel","Row","Col","md","TextField","label","value","onChange","e","target","type","utils","DateFnsUtils","DateTimePicker","marginTop","format","inputVariant","animateYearScrolling","leftArrowIcon","rightArrowIcon","multiline","rows","defaultValue","Button","CreateEvent","UpdateEvent","borderRight","outline","fontSize","CardDeck","map","index","key","Card","CardTitle","CardSubtitle","moment","CardText","Component","EventIndex","Event","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d1677922.chunk.js","sourcesContent":["import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nfunction DialogComponent(props) {\n\n  return (\n    <div>\n      <Dialog\n        open={props.open}\n        maxWidth={'md'}\n        style={{ borderRadius: '32px', background: '#000000a6' }}\n        fullWidth={true}\n        onClose={props.onClose}\n        scroll={'paper'}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\">\n        <DialogTitle id=\"customized-dialog-title\" onClose={props.onCloseTitle}>\n          {props.TitleName}\n        </DialogTitle>\n        <DialogContent dividers={true}>\n          {props.DialogContent}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default DialogComponent;","import React from 'react';\nimport Scheduler from 'devextreme-react/scheduler';\n\n//Import style\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\n\nfunction SchedulerComponent(props) {\n\n  return (\n    <div>\n      <Scheduler\n        dataSource={props.dataSource}\n        views={props.views}\n        defaultCurrentView=\"month\"\n        className={props.className}\n        defaultCurrentDate={new Date()}\n        height={460}\n        startDayHour={7}\n        editing={false}\n        showAllDayPanel={false}\n        startDateExpr={props.startDateExpr}\n        textExpr={props.textExpr}\n      />\n    </div>\n  );\n}\n\nexport default SchedulerComponent;","import React, { Component } from 'react';\nimport {\n  NotificationManager\n} from 'react-notifications';\nimport {\n  Button, CardTitle, CardText, CardDeck,\n  CardSubtitle\n} from 'reactstrap';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AddOutlinedIcon from '@material-ui/icons/AddOutlined';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Card, Row, Col } from 'reactstrap';\nimport TextField from '@material-ui/core/TextField';\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport moment from 'moment'\n//Import reusing component's\nimport DialogComp from './dialogComponent'\nimport SchedularComp from './schedulerComponent'\n\n//Import links for Api\nimport links from '../apiLink.json'\n\n//Import style\nimport './event.css'\n// import \"react-datepicker/dist/react-datepicker.css\";\n\nconst views = ['day', 'workWeek', 'month'];\n\nclass EventPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventDetails: [],\n      isEvent: false,\n      isEventEdit: false,\n      comment: '',\n      duration: '',\n      destination: '',\n      id: 0,\n      deleteID: 0,\n      isOpenAlert: false,\n      errors: {},\n      selectedDate: new Date()\n    }\n  }\n\n  handleValidation(){\n    let errors = {};\n    let formIsValid = true;\n\n    //Destination\n    if(!this.state.destination){\n       formIsValid = false;\n       errors[\"destination\"] = \"Destination Cannot be empty\";\n    }\n\n    //duration\n    if(!this.state.duration){\n      formIsValid = false;\n      errors[\"duration\"] = \"Duration Cannot be empty\";\n   }\n\n   //comment\n   if(!this.state.comment){\n    formIsValid = false;\n    errors[\"comment\"] = \"Comment Cannot be empty\";\n }\n\n   this.setState({errors: errors});\n   return formIsValid;\n}\n\n  handleCreateEvent = () => {\n    this.setState({ isEvent: true }, () => {\n    })\n  }\n\n  handleEditEvent = (row) => {\n    this.setState({\n      destination: row.destination,\n      selectedDate: row.start,\n      duration: row.duration,\n      comment: row.comment,\n      id: row.id,\n      isEventEdit: true\n    }, () => {\n    })\n  }\n\n  handleTextfield = (name, val) => {\n    this.setState({ [name]: val }, () => {\n    })\n  }\n\n  handleDateChange = (date) => {\n    this.setState({ selectedDate: date }, () => {\n    });\n  };\n\n  onCloseModal = () => {\n    this.setState({ isEvent: false, isEventEdit: false, comment: '', duration: '', destination: '', id: 0, selectedDate: new Date(), errors: {} })\n  }\n\n  //Displaying details of all the events\n  AllEvent() {\n    fetch(links.eventDetails, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(response => {\n        const statusCode = response.status;\n        const data = response.json();\n        return Promise.all([statusCode, data]);\n      })\n      .then(json => {\n        if (json[0] === 200) {\n          this.setState({ eventDetails: json[1] }, () => {\n          });\n        }\n      })\n      .catch(error =>\n        this.setState(\n          {\n            error,\n            isLoading: false\n          },\n          NotificationManager.error(\"Server unexpectedly lost the connection. Please try after some time.\"),\n\n        ),\n      );\n  }\n\n  // Create events\n  CreateEvent() {\n    if(this.handleValidation()){\n    fetch(links.eventDetails, {\n      method: \"POST\",\n      body:\n        JSON.stringify({\n          \"destination\": this.state.destination,\n          \"start\": this.state.selectedDate,\n          \"duration\": this.state.duration,\n          \"comment\": this.state.comment,\n        }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(response => {\n        const statusCode = response.status;\n        const data = response.json();\n        return Promise.all([statusCode, data]);\n      })\n      .then(json => {\n        if (json[0] === 201) {\n          this.setState({ isEvent: false })\n          this.AllEvent();\n          NotificationManager.success('Event added successfully');\n        }\n      })\n      .catch(error =>\n        this.setState(\n          {\n            error,\n            isLoading: false\n          },\n          NotificationManager.error(\"Server unexpectedly lost the connection. Please try after some time.\"),\n\n        ),\n      );\n        }\n  }\n\n  // Update events\n  UpdateEvent() {\n    if(this.handleValidation()){\n    fetch(links.eventDetails + '/' + this.state.id + '/', {\n      method: \"PUT\",\n      body:\n        JSON.stringify({\n          \"destination\": this.state.destination,\n          \"start\": this.state.selectedDate,\n          \"duration\": this.state.duration,\n          \"comment\": this.state.comment,\n        }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(response => {\n        const statusCode = response.status;\n        const data = response.json();\n        return Promise.all([statusCode, data]);\n      })\n      .then(json => {\n        if (json[0] === 200) {\n          this.setState({ isEventEdit: false })\n          this.AllEvent();\n          NotificationManager.success('Event updated successfully');\n        }\n      })\n      .catch(error =>\n        this.setState(\n          {\n            error,\n            isLoading: false\n          },\n          NotificationManager.error(\"Server unexpectedly lost the connection. Please try after some time.\"),\n\n        ),\n      );\n        }\n  }\n\n  // Delete events\n  DeleteEvent() {\n    fetch(links.eventDetails + '/' + this.state.deleteID + '/', {\n      method: \"Delete\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(response => {\n        const statusCode = response.status;\n        const data = response.json();\n        return Promise.all([statusCode, data]);\n      })\n      .then(json => {\n        if (json[0] === 200) {\n          this.AllEvent();\n          NotificationManager.success('Event deleted successfully');\n          this.setState({isOpenAlert: false})\n        }\n      })\n      .catch(error =>\n        this.setState(\n          {\n            error,\n            isLoading: false\n          },\n          NotificationManager.error(\"Server unexpectedly lost the connection. Please try after some time.\"),\n\n        ),\n      );\n  }\n\n  componentDidMount() {\n    this.AllEvent()\n  }\n  render() {\n    let addEvent;\n    let dialogContent;\n    let deleteEvent;\n\n    deleteEvent = (\n      <SweetAlert\n\t\t\t\t\tshow={this.state.isOpenAlert}\n\t\t\t\t\terror\n\t\t\t\t\tshowCancel\n\t\t\t\t\tconfirmBtnText={<span>Ok</span>}\n\t\t\t\t\tconfirmBtnBsStyle=\"primary\"\n\t\t\t\t\tcancelBtnBsStyle=\"default\"\n\t\t\t\t\tonOutsideClick={() => {\n\t\t\t\t\t\tthis.setState({ isOpenAlert: true })\n\t\t\t\t\t  }}\n\t\t\t\t\ttitle={<span>Are you sure want to delete!</span>}\n\t\t\t\t\tonConfirm={() => {\n\t\t\t\t\t\tthis.DeleteEvent()\n\t\t\t\t\t}}\n\t\t\t\t\tonCancel={() => {\n\t\t\t\t\t\tthis.setState({ isOpenAlert: false, deleteID: 0 });\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<label>\n\t\t\t\t\t\tYou will not be able to recover this record!\n\t\t\t\t\t</label>\n\t\t\t\t</SweetAlert>\n    )\n\n    dialogContent = (\n      <div>\n        <Row className=\"rowstyl\">\n          <Col md=\"4\">\n            <TextField\n              id=\"dest\"\n              margin=\"dense\"\n              label=\"Destination\"\n              value={this.state.destination}\n              onChange={(e) => this.handleTextfield('destination', e.target.value)}\n              variant=\"outlined\"\n              fullWidth\n            />\n            <span style={{color: \"red\"}}>{this.state.errors[\"destination\"]}</span>\n          </Col>\n          <Col md=\"4\">\n            <TextField\n              id=\"duration\"\n              margin=\"dense\"\n              type=\"number\"\n              value={this.state.duration}\n              onChange={(e) => this.handleTextfield('duration', e.target.value)}\n              label=\"Duration\"\n              variant=\"outlined\"\n              fullWidth\n            />\n            <span style={{color: \"red\"}}>{this.state.errors[\"duration\"]}</span>\n          </Col>\n          <Col md=\"4\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DateTimePicker\n                fullWidth\n                style={{ marginTop: '2px' }}\n                value={this.state.selectedDate}\n                onChange={this.handleDateChange}\n                label=\"Date\"\n                format=\"MMM. d, yyyy hh:mm a\"\n                inputVariant=\"outlined\"\n                margin=\"dense\"\n                animateYearScrolling={true}\n                leftArrowIcon={<i className=\"zmdi zmdi-arrow-back\" />}\n                rightArrowIcon={<i className=\"zmdi zmdi-arrow-forward\" />}\n              />\n            </MuiPickersUtilsProvider>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col md='12'>\n            <TextField\n              id=\"outlined-multiline-static\"\n              label=\"Comment\"\n              multiline\n              rows={4}\n              defaultValue=\"Default Value\"\n              value={this.state.comment}\n              onChange={(e) => this.handleTextfield('comment', e.target.value)}\n              variant=\"outlined\"\n              fullWidth={true}\n            />\n            <span style={{color: \"red\"}}>{this.state.errors[\"comment\"]}</span>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col md='12'>\n            <div className=\"d-flex\">\n              <div className=\"ml-auto\">\n                <Button onClick={() => this.state.isEvent ? this.CreateEvent() : this.UpdateEvent()}>\n                  {this.state.isEvent ? 'Save' : 'Update'}\n                </Button>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n    if (this.state.isEvent === true || this.state.isEventEdit === true) {\n      addEvent = (\n        <div>\n          <DialogComp\n            open={true}\n            onClose={this.onCloseModal}\n            onCloseTitle={this.onCloseModal}\n            TitleName={this.state.isEvent ? 'Add Event' : 'Update Event'}\n            DialogContent={dialogContent}\n          />\n        </div>\n      )\n    }\n    return (\n      <div>\n        <Row\n          style={{\n            margin: \"0px\"\n          }}>\n          <Col md=\"6\" style={{\n            borderRight: '1px solid #ccc'\n          }}>\n            <div className=\"d-flex\">\n              <label className=\"label\">Event Details</label>\n              <div className=\"ml-auto\">\n                <IconButton style={{ outline: '0' }} title=\"Add Event\"\n                  onClick={() => this.handleCreateEvent()}>\n                  <AddOutlinedIcon fontSize=\"large\" />\n                </IconButton>\n              </div>\n            </div>\n            <CardDeck>\n              <Row>\n                {this.state.eventDetails ? this.state.eventDetails.map((val, index) => {\n                  return (<Col md=\"6\" key={index} className=\"cardStly\">\n                    <Card body outline color=\"secondary\">\n                      <CardTitle className=\"label\">{val.destination}</CardTitle>\n                      <CardSubtitle className=\"subTitle\">{moment(val.start).format('MMM. D, yyyy')} | duration {val.duration}</CardSubtitle>\n                      <CardText className=\"cardbodyContent\">{val.comment}</CardText>\n                      <div>\n                        <IconButton style={{ outline: '0' }} title=\"Edit Event\"\n                          onClick={() => this.handleEditEvent(val)}>\n                          <EditOutlinedIcon fontSize=\"small\" />\n                        </IconButton>\n                        <IconButton style={{ outline: '0' }} title=\"Delete Event\"\n                          onClick={() => \n                          this.setState({isOpenAlert : true, deleteID: val.id})}>\n                          <DeleteOutlinedIcon fontSize=\"small\" />\n                        </IconButton>\n                      </div>\n                    </Card>\n                  </Col>)\n                }) : null}\n              </Row>\n            </CardDeck>\n          </Col>\n          <Col md='6'>\n            <label className=\"Complabel\">Detangled Engineering</label>\n            <SchedularComp\n              dataSource={this.state.eventDetails}\n              views={views}\n              className=\"schedulerStly\"\n              startDateExpr=\"start\"\n              textExpr=\"destination\"\n            />\n          </Col>\n          {addEvent}\n          {deleteEvent}\n        </Row>\n      </div>\n    );\n  }\n}\nexport default EventPage;\n","import React, { Component } from 'react';\nimport Event from './Event'\nimport {\n    NotificationContainer\n} from 'react-notifications';\n\n\n//Import style\nimport '../asset/style/card.css'\nimport 'react-notifications/lib/notifications.css';\n\nclass EventIndex extends Component {\n    render() {\n        return (\n            <div>\n                <br />\n                <br />\n                <Event />\n                <NotificationContainer />\n            </div>\n        );\n    }\n}\n\nexport default EventIndex;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Event from './Event/index';\nimport * as serviceWorker from './serviceWorker';\n\n//import style\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Event />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}